"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractAudio = void 0;
const compositor_1 = require("./compositor/compositor");
/**
 * @description Extracts the audio from a video source and saves it at the specified output path without changing the audio format.
 * @see [Documentation](https://remotion.dev/docs/renderer/extract-audio)
 * @param options.videoSource The path to the video source from which the audio will be extracted.
 * @param options.audioOutput The path where the extracted audio will be saved. Must use the correct file extension which matches the audio codec.
 * @param options.logLevel The level of logging desired (optional).
 * @param options.binariesDirectory The directory for binary dependencies (optional).
 * @returns {Promise<void>} Resolves once the audio extraction is complete.
 */
const extractAudio = async (options) => {
    var _a, _b;
    const compositor = (0, compositor_1.startLongRunningCompositor)({
        maximumFrameCacheItemsInBytes: null,
        logLevel: (_a = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _a !== void 0 ? _a : 'info',
        indent: false,
        binariesDirectory: (_b = options.binariesDirectory) !== null && _b !== void 0 ? _b : null,
    });
    await compositor.executeCommand('ExtractAudio', {
        input_path: options.videoSource,
        output_path: options.audioOutput,
    });
    await compositor.finishCommands();
    await compositor.waitForDone();
};
exports.extractAudio = extractAudio;
