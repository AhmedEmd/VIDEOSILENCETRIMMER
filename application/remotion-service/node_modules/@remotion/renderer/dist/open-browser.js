"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.openBrowser = exports.internalOpenBrowser = void 0;
const browser_instances_1 = require("./browser-instances");
const browser_download_progress_bar_1 = require("./browser/browser-download-progress-bar");
const node_1 = require("./browser/node");
const ensure_browser_1 = require("./ensure-browser");
const get_local_browser_executable_1 = require("./get-local-browser-executable");
const get_video_threads_flag_1 = require("./get-video-threads-flag");
const log_level_1 = require("./log-level");
const logger_1 = require("./logger");
const gl_1 = require("./options/gl");
const featuresToEnable = (option) => {
    const renderer = option !== null && option !== void 0 ? option : gl_1.DEFAULT_OPENGL_RENDERER;
    const enableAlways = ['NetworkService', 'NetworkServiceInProcess'];
    if (renderer === 'vulkan') {
        return [...enableAlways, 'Vulkan', 'UseSkiaRenderer'];
    }
    if (renderer === 'angle-egl') {
        return [...enableAlways, 'VaapiVideoDecoder'];
    }
    return enableAlways;
};
const getOpenGlRenderer = (option) => {
    const renderer = option !== null && option !== void 0 ? option : gl_1.DEFAULT_OPENGL_RENDERER;
    (0, gl_1.validateOpenGlRenderer)(renderer);
    if (renderer === 'swangle') {
        return ['--use-gl=angle', '--use-angle=swiftshader'];
    }
    if (renderer === 'angle-egl') {
        return ['--use-gl=angle', '--use-angle=gl-egl'];
    }
    if (renderer === 'vulkan') {
        return [
            '--use-angle=vulkan',
            '--use-vulkan=swiftshader',
            '--disable-vulkan-fallback-to-gl-for-testing',
            '--dignore-gpu-blocklist',
        ];
    }
    if (renderer === null) {
        return [];
    }
    return [`--use-gl=${renderer}`];
};
const internalOpenBrowser = async ({ browser, browserExecutable, chromiumOptions, forceDeviceScaleFactor, indent, viewport, logLevel, onBrowserDownload, }) => {
    var _a, _b, _c;
    // @ts-expect-error Firefox
    if (browser === 'firefox') {
        throw new TypeError('Firefox supported is not yet turned on. Stay tuned for the future.');
    }
    await (0, ensure_browser_1.internalEnsureBrowser)({
        browserExecutable,
        logLevel,
        indent,
        onBrowserDownload,
    });
    const executablePath = (0, get_local_browser_executable_1.getLocalBrowserExecutable)(browserExecutable);
    const customGlRenderer = getOpenGlRenderer((_a = chromiumOptions.gl) !== null && _a !== void 0 ? _a : null);
    const enableMultiProcessOnLinux = (_b = chromiumOptions.enableMultiProcessOnLinux) !== null && _b !== void 0 ? _b : true;
    logger_1.Log.verbose({ indent, logLevel, tag: 'openBrowser()' }, `Opening browser: gl = ${chromiumOptions.gl}, executable = ${executablePath}, enableMultiProcessOnLinux = ${enableMultiProcessOnLinux}`);
    if (chromiumOptions.userAgent) {
        logger_1.Log.verbose({ indent, logLevel: 'verbose', tag: 'openBrowser()' }, `Using custom user agent: ${chromiumOptions.userAgent}`);
    }
    const browserInstance = await node_1.puppeteer.launch({
        executablePath,
        dumpio: (0, log_level_1.isEqualOrBelowLogLevel)(logLevel, 'verbose'),
        logLevel,
        indent,
        args: [
            'about:blank',
            '--allow-pre-commit-input',
            '--disable-background-networking',
            `--enable-features=${featuresToEnable(chromiumOptions.gl).join(',')}`,
            '--disable-background-timer-throttling',
            '--disable-backgrounding-occluded-windows',
            '--disable-breakpad',
            '--disable-client-side-phishing-detection',
            '--disable-component-extensions-with-background-pages',
            '--disable-default-apps',
            '--disable-dev-shm-usage',
            '--no-proxy-server',
            "--proxy-server='direct://'",
            '--proxy-bypass-list=*',
            '--disable-hang-monitor',
            '--disable-extensions',
            '--disable-ipc-flooding-protection',
            '--disable-popup-blocking',
            '--disable-prompt-on-repost',
            '--disable-renderer-backgrounding',
            '--disable-sync',
            '--force-color-profile=srgb',
            '--metrics-recording-only',
            '--mute-audio',
            '--no-first-run',
            `--video-threads=${(0, get_video_threads_flag_1.getIdealVideoThreadsFlag)(logLevel)}`,
            '--enable-automation',
            '--password-store=basic',
            '--use-mock-keychain',
            '--enable-blink-features=IdleDetection',
            '--export-tagged-pdf',
            '--intensive-wake-up-throttling-policy=0',
            ((_c = chromiumOptions.headless) !== null && _c !== void 0 ? _c : true) ? '--headless=old' : null,
            '--no-sandbox',
            '--disable-setuid-sandbox',
            ...customGlRenderer,
            '--disable-background-media-suspend',
            process.platform === 'linux' &&
                chromiumOptions.gl !== 'vulkan' &&
                !enableMultiProcessOnLinux
                ? '--single-process'
                : null,
            '--allow-running-insecure-content', // https://source.chromium.org/search?q=lang:cpp+symbol:kAllowRunningInsecureContent&ss=chromium
            '--disable-component-update', // https://source.chromium.org/search?q=lang:cpp+symbol:kDisableComponentUpdate&ss=chromium
            '--disable-domain-reliability', // https://source.chromium.org/search?q=lang:cpp+symbol:kDisableDomainReliability&ss=chromium
            '--disable-features=AudioServiceOutOfProcess,IsolateOrigins,site-per-process,Translate,BackForwardCache,AvoidUnnecessaryBeforeUnloadCheckSync,IntensiveWakeUpThrottling', // https://source.chromium.org/search?q=file:content_features.cc&ss=chromium
            '--disable-print-preview', // https://source.chromium.org/search?q=lang:cpp+symbol:kDisablePrintPreview&ss=chromium
            '--disable-site-isolation-trials', // https://source.chromium.org/search?q=lang:cpp+symbol:kDisableSiteIsolation&ss=chromium
            '--disk-cache-size=268435456', // https://source.chromium.org/search?q=lang:cpp+symbol:kDiskCacheSize&ss=chromium
            '--hide-scrollbars', // https://source.chromium.org/search?q=lang:cpp+symbol:kHideScrollbars&ss=chromium
            '--no-default-browser-check', // https://source.chromium.org/search?q=lang:cpp+symbol:kNoDefaultBrowserCheck&ss=chromium
            '--no-pings', // https://source.chromium.org/search?q=lang:cpp+symbol:kNoPings&ss=chromium
            '--font-render-hinting=none',
            '--no-zygote', // https://source.chromium.org/search?q=lang:cpp+symbol:kNoZygote&ss=chromium,
            '--ignore-gpu-blocklist',
            '--enable-unsafe-webgpu',
            typeof forceDeviceScaleFactor === 'undefined'
                ? null
                : `--force-device-scale-factor=${forceDeviceScaleFactor}`,
            chromiumOptions.ignoreCertificateErrors
                ? '--ignore-certificate-errors'
                : null,
            ...((chromiumOptions === null || chromiumOptions === void 0 ? void 0 : chromiumOptions.disableWebSecurity)
                ? ['--disable-web-security']
                : []),
            (chromiumOptions === null || chromiumOptions === void 0 ? void 0 : chromiumOptions.userAgent)
                ? `--user-agent="${chromiumOptions.userAgent}"`
                : null,
        ].filter(Boolean),
        defaultViewport: viewport !== null && viewport !== void 0 ? viewport : {
            height: 720,
            width: 1280,
            deviceScaleFactor: 1,
        },
    });
    const pages = await browserInstance.pages(logLevel, indent);
    await pages[0].close();
    (0, browser_instances_1.addHeadlessBrowser)(browserInstance);
    return browserInstance;
};
exports.internalOpenBrowser = internalOpenBrowser;
/**
 * @description Opens a Chrome or Chromium browser instance.
 * @see [Documentation](https://www.remotion.dev/docs/renderer/open-browser)
 */
const openBrowser = (browser, options) => {
    var _a;
    const { browserExecutable, chromiumOptions, forceDeviceScaleFactor } = options !== null && options !== void 0 ? options : {};
    const indent = false;
    const logLevel = (_a = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _a !== void 0 ? _a : ((options === null || options === void 0 ? void 0 : options.shouldDumpIo) ? 'verbose' : 'info');
    return (0, exports.internalOpenBrowser)({
        browser,
        browserExecutable: browserExecutable !== null && browserExecutable !== void 0 ? browserExecutable : null,
        chromiumOptions: chromiumOptions !== null && chromiumOptions !== void 0 ? chromiumOptions : {},
        forceDeviceScaleFactor,
        indent,
        viewport: null,
        logLevel,
        onBrowserDownload: (0, browser_download_progress_bar_1.defaultBrowserDownloadProgress)({
            indent,
            logLevel,
            api: 'openBrowser()',
        }),
    });
};
exports.openBrowser = openBrowser;
