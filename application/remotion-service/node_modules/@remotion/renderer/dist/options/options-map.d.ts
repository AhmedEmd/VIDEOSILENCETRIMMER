export declare const optionsMap: {
    readonly renderMedia: {
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly videoBitrate: {
            name: string;
            cliFlag: "video-bitrate";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string | null;
            };
            setConfig: (bitrate: string | null) => void;
        };
        readonly numberOfGifLoops: {
            name: string;
            cliFlag: "number-of-gif-loops";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "numberOfGifLoops";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: number;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (newLoop: import("./number-of-gif-loops").NumberOfGifLoops) => void;
        };
        readonly repro: {
            name: string;
            cliFlag: "repro";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: boolean;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: boolean;
                source: string;
            };
            setConfig: (should: boolean) => void;
        };
        readonly x264Preset: {
            name: string;
            cliFlag: "x264-preset";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "x264Preset";
            docLink: string;
            type: "ultrafast" | "superfast" | "veryfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo" | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "ultrafast" | "superfast" | "veryfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo";
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (profile: "ultrafast" | "superfast" | "veryfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo" | null) => void;
        };
        readonly audioBitrate: {
            name: string;
            cliFlag: "audio-bitrate";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: string;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (value: string | null) => void;
        };
        readonly colorSpace: {
            name: string;
            cliFlag: "color-space";
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            ssrName: string;
            type: "default" | "bt709" | "bt2020-ncl" | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: "default" | "bt709" | "bt2020-ncl";
            };
            setConfig: (value: "default" | "bt709" | "bt2020-ncl" | null) => void;
        };
        readonly codec: {
            name: string;
            cliFlag: "codec";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "h264-ts" | "gif";
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }, { compositionCodec, configFile, downloadName, outName, uiCodec, }: {
                outName: string | null;
                downloadName: string | null;
                configFile: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "h264-ts" | "gif" | null;
                uiCodec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "h264-ts" | "gif" | null;
                compositionCodec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "h264-ts" | "gif" | null;
            }) => {
                value: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "h264-ts" | "gif";
                source: string;
            };
            setConfig: (newCodec: import("..").CodecOrUndefined) => void;
        };
        readonly jpegQuality: {
            name: string;
            cliFlag: "jpeg-quality";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            setConfig: (q: number | undefined) => void;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
        };
        readonly encodingMaxRate: {
            name: string;
            cliFlag: "max-rate";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "encodingMaxRate";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: string;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (newMaxRate: string | null) => void;
        };
        readonly encodingBufferSize: {
            name: string;
            cliFlag: "buffer-size";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "encodingBufferSize";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: string;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (bitrate: string | null) => void;
        };
        readonly muted: {
            name: string;
            cliFlag: "muted";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: boolean;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: boolean;
            };
            setConfig: () => void;
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly timeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
        readonly binariesDirectory: {
            name: string;
            cliFlag: "binaries-directory";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "binariesDirectory";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string | null;
            };
            setConfig: (value: string | null) => void;
        };
        readonly forSeamlessAacConcatenation: {
            name: string;
            cliFlag: "for-seamless-aac-concatenation";
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: true;
            } | {
                source: string;
                value: false;
            };
            setConfig: (value: boolean) => void;
            ssrName: string;
            type: boolean;
        };
        readonly separateAudioTo: {
            cliFlag: string;
            description: () => string;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string;
            } | {
                source: string;
                value: null;
            };
            name: string;
            setConfig: () => never;
            ssrName: string;
            type: string | null;
        };
        readonly audioCodec: {
            cliFlag: "audio-codec";
            setConfig: (audioCodec: "mp3" | "aac" | "pcm-16" | "opus" | null) => void;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: "mp3" | "aac" | "pcm-16" | "opus";
            } | {
                source: string;
                value: null;
            };
            description: () => string;
            docLink: string;
            name: string;
            ssrName: "audioCodec";
            type: "mp3" | "aac" | "pcm-16" | "opus";
        };
        readonly onBrowserDownload: {
            name: string;
            cliFlag: "on-browser-download";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "onBrowserDownload";
            docLink: string;
            type: import("./on-browser-download").OnBrowserDownload;
            getValue: () => never;
            setConfig: () => never;
        };
    };
    readonly stitchFramesToVideo: {
        readonly separateAudioTo: {
            cliFlag: string;
            description: () => string;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string;
            } | {
                source: string;
                value: null;
            };
            name: string;
            setConfig: () => never;
            ssrName: string;
            type: string | null;
        };
    };
    readonly renderStill: {
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly jpegQuality: {
            name: string;
            cliFlag: "jpeg-quality";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            setConfig: (q: number | undefined) => void;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly timeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
        readonly binariesDirectory: {
            name: string;
            cliFlag: "binaries-directory";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "binariesDirectory";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string | null;
            };
            setConfig: (value: string | null) => void;
        };
        readonly onBrowserDownload: {
            name: string;
            cliFlag: "on-browser-download";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "onBrowserDownload";
            docLink: string;
            type: import("./on-browser-download").OnBrowserDownload;
            getValue: () => never;
            setConfig: () => never;
        };
    };
    readonly getCompositions: {
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly timeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
        readonly binariesDirectory: {
            name: string;
            cliFlag: "binaries-directory";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "binariesDirectory";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string | null;
            };
            setConfig: (value: string | null) => void;
        };
        readonly onBrowserDownload: {
            name: string;
            cliFlag: "on-browser-download";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "onBrowserDownload";
            docLink: string;
            type: import("./on-browser-download").OnBrowserDownload;
            getValue: () => never;
            setConfig: () => never;
        };
    };
    readonly selectComposition: {
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly timeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
        readonly binariesDirectory: {
            name: string;
            cliFlag: "binaries-directory";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "binariesDirectory";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string | null;
            };
            setConfig: (value: string | null) => void;
        };
        readonly onBrowserDownload: {
            name: string;
            cliFlag: "on-browser-download";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "onBrowserDownload";
            docLink: string;
            type: import("./on-browser-download").OnBrowserDownload;
            getValue: () => never;
            setConfig: () => never;
        };
    };
    readonly renderFrames: {
        readonly forSeamlessAacConcatenation: {
            name: string;
            cliFlag: "for-seamless-aac-concatenation";
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: true;
            } | {
                source: string;
                value: false;
            };
            setConfig: (value: boolean) => void;
            ssrName: string;
            type: boolean;
        };
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly jpegQuality: {
            name: string;
            cliFlag: "jpeg-quality";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            setConfig: (q: number | undefined) => void;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly timeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
        readonly binariesDirectory: {
            name: string;
            cliFlag: "binaries-directory";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "binariesDirectory";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string | null;
            };
            setConfig: (value: string | null) => void;
        };
        readonly onBrowserDownload: {
            name: string;
            cliFlag: "on-browser-download";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "onBrowserDownload";
            docLink: string;
            type: import("./on-browser-download").OnBrowserDownload;
            getValue: () => never;
            setConfig: () => never;
        };
    };
    readonly renderMediaOnLambda: {
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly videoBitrate: {
            name: string;
            cliFlag: "video-bitrate";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string | null;
            };
            setConfig: (bitrate: string | null) => void;
        };
        readonly numberOfGifLoops: {
            name: string;
            cliFlag: "number-of-gif-loops";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "numberOfGifLoops";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: number;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (newLoop: import("./number-of-gif-loops").NumberOfGifLoops) => void;
        };
        readonly preferLossless: {
            name: string;
            cliFlag: "prefer-lossless";
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            type: boolean;
            ssrName: "preferLossless";
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: true;
                source: string;
            } | {
                value: false;
                source: string;
            };
            setConfig: (val: boolean) => void;
        };
        readonly audioBitrate: {
            name: string;
            cliFlag: "audio-bitrate";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: string;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (value: string | null) => void;
        };
        readonly deleteAfter: {
            name: string;
            cliFlag: "delete-after";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "deleteAfter";
            docLink: string;
            type: import("./delete-after").DeleteAfter | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: import("./delete-after").DeleteAfter;
            } | {
                source: string;
                value: null;
            };
            setConfig: (value: import("./delete-after").DeleteAfter | null) => void;
        };
        readonly x264Preset: {
            name: string;
            cliFlag: "x264-preset";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "x264Preset";
            docLink: string;
            type: "ultrafast" | "superfast" | "veryfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo" | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "ultrafast" | "superfast" | "veryfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo";
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (profile: "ultrafast" | "superfast" | "veryfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo" | null) => void;
        };
        readonly encodingMaxRate: {
            name: string;
            cliFlag: "max-rate";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "encodingMaxRate";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: string;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (newMaxRate: string | null) => void;
        };
        readonly encodingBufferSize: {
            name: string;
            cliFlag: "buffer-size";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "encodingBufferSize";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: string;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (bitrate: string | null) => void;
        };
        readonly colorSpace: {
            name: string;
            cliFlag: "color-space";
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            ssrName: string;
            type: "default" | "bt709" | "bt2020-ncl" | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: "default" | "bt709" | "bt2020-ncl";
            };
            setConfig: (value: "default" | "bt709" | "bt2020-ncl" | null) => void;
        };
        readonly muted: {
            name: string;
            cliFlag: "muted";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: boolean;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: boolean;
            };
            setConfig: () => void;
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly timeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
    };
    readonly renderStillOnLambda: {
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly jpegQuality: {
            name: string;
            cliFlag: "jpeg-quality";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            setConfig: (q: number | undefined) => void;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly deleteAfter: {
            name: string;
            cliFlag: "delete-after";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "deleteAfter";
            docLink: string;
            type: import("./delete-after").DeleteAfter | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: import("./delete-after").DeleteAfter;
            } | {
                source: string;
                value: null;
            };
            setConfig: (value: import("./delete-after").DeleteAfter | null) => void;
        };
        readonly scale: {
            name: string;
            cliFlag: "scale";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (scale: number) => void;
        };
        readonly timeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
    };
    readonly getCompositionsOnLambda: {
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly timeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
    };
    readonly renderMediaOnCloudRun: {
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly numberOfGifLoops: {
            name: string;
            cliFlag: "number-of-gif-loops";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "numberOfGifLoops";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: number;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (newLoop: import("./number-of-gif-loops").NumberOfGifLoops) => void;
        };
        readonly preferLossless: {
            name: string;
            cliFlag: "prefer-lossless";
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            type: boolean;
            ssrName: "preferLossless";
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: true;
                source: string;
            } | {
                value: false;
                source: string;
            };
            setConfig: (val: boolean) => void;
        };
        readonly colorSpace: {
            name: string;
            cliFlag: "color-space";
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            ssrName: string;
            type: "default" | "bt709" | "bt2020-ncl" | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: "default" | "bt709" | "bt2020-ncl";
            };
            setConfig: (value: "default" | "bt709" | "bt2020-ncl" | null) => void;
        };
        readonly audioBitrate: {
            name: string;
            cliFlag: "audio-bitrate";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: string;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (value: string | null) => void;
        };
        readonly videoBitrate: {
            name: string;
            cliFlag: "video-bitrate";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: string | null;
            };
            setConfig: (bitrate: string | null) => void;
        };
        readonly x264Preset: {
            name: string;
            cliFlag: "x264-preset";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "x264Preset";
            docLink: string;
            type: "ultrafast" | "superfast" | "veryfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo" | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "ultrafast" | "superfast" | "veryfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo";
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (profile: "ultrafast" | "superfast" | "veryfast" | "faster" | "fast" | "medium" | "slow" | "slower" | "veryslow" | "placebo" | null) => void;
        };
        readonly encodingMaxRate: {
            name: string;
            cliFlag: "max-rate";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "encodingMaxRate";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: string;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (newMaxRate: string | null) => void;
        };
        readonly encodingBufferSize: {
            name: string;
            cliFlag: "buffer-size";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "encodingBufferSize";
            docLink: string;
            type: string | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: string;
                source: string;
            } | {
                value: null;
                source: string;
            };
            setConfig: (bitrate: string | null) => void;
        };
        readonly muted: {
            name: string;
            cliFlag: "muted";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: boolean;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: boolean;
            };
            setConfig: () => void;
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly delayRenderTimeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
        readonly enforceAudioTrack: {
            name: string;
            cliFlag: "enforce-audio-track";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: boolean;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: true;
            } | {
                source: string;
                value: false;
            };
            setConfig: (value: boolean) => void;
        };
        readonly scale: {
            name: string;
            cliFlag: "scale";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (scale: number) => void;
        };
        readonly crf: {
            name: string;
            cliFlag: "crf";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: import("..").Crf;
            };
            setConfig: (crf: import("..").Crf) => void;
        };
        readonly jpegQuality: {
            name: string;
            cliFlag: "jpeg-quality";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            setConfig: (q: number | undefined) => void;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
        };
    };
    readonly renderStillOnCloudRun: {
        readonly offthreadVideoCacheSizeInBytes: {
            name: string;
            cliFlag: "offthreadvideo-cache-size-in-bytes";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "offthreadVideoCacheSizeInBytes";
            docLink: string;
            type: number | null;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            } | {
                source: string;
                value: null;
            };
            setConfig: (size: number | null) => void;
        };
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly scale: {
            name: string;
            cliFlag: "scale";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (scale: number) => void;
        };
        readonly jpegQuality: {
            name: string;
            cliFlag: "jpeg-quality";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: string;
            docLink: string;
            type: number;
            setConfig: (q: number | undefined) => void;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
        };
        readonly delayRenderTimeoutInMilliseconds: {
            name: string;
            cliFlag: "timeout";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "timeoutInMilliseconds";
            docLink: string;
            type: number;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: number;
            };
            setConfig: (value: number) => void;
        };
    };
    readonly ensureBrowser: {
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly onBrowserDownload: {
            name: string;
            cliFlag: "on-browser-download";
            description: () => import("react/jsx-runtime").JSX.Element;
            ssrName: "onBrowserDownload";
            docLink: string;
            type: import("./on-browser-download").OnBrowserDownload;
            getValue: () => never;
            setConfig: () => never;
        };
    };
    readonly deploySiteLambda: {
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
        readonly throwIfSiteExists: {
            cliFlag: string;
            description: () => string;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                source: string;
                value: boolean;
            };
            name: string;
            setConfig: () => never;
            ssrName: string;
            type: boolean;
        };
    };
    readonly deploySiteCloudRun: {
        readonly logLevel: {
            cliFlag: "log";
            name: string;
            ssrName: string;
            description: () => import("react/jsx-runtime").JSX.Element;
            docLink: string;
            getValue: ({ commandLine }: {
                commandLine: Record<string, unknown>;
            }) => {
                value: "verbose" | "info" | "warn" | "error";
                source: string;
            };
            setConfig: (newLogLevel: "verbose" | "info" | "warn" | "error") => void;
            type: "verbose" | "info" | "warn" | "error";
        };
    };
};
