import type { BrowserExecutable } from './browser-executable';
import type { BrowserSafeApis } from './client';
import type { ToOptions } from './options/option';
export type BrowserStatus = {
    type: 'user-defined-path';
    path: string;
} | {
    type: 'local-browser';
    path: string;
} | {
    type: 'local-puppeteer-browser';
    path: string;
} | {
    type: 'no-browser';
};
type InternalEnsureBrowserOptions = {
    browserExecutable: BrowserExecutable;
    indent: boolean;
} & ToOptions<typeof BrowserSafeApis.optionsMap.ensureBrowser>;
export type EnsureBrowserOptions = Partial<{
    browserExecutable: BrowserExecutable;
} & ToOptions<typeof BrowserSafeApis.optionsMap.ensureBrowser>>;
export declare const internalEnsureBrowser: ({ indent, logLevel, browserExecutable, onBrowserDownload, }: InternalEnsureBrowserOptions) => Promise<BrowserStatus>;
/**
 * Ensures a browser is locally installed so a Remotion render can be executed. This function manages the browser's download or validates existing browser paths.
 * @see [Documentation](https://remotion.dev/docs/renderer/ensure-browser)
 * @param {EnsureBrowserOptions} [options] Configuration options which may include a `browserExecutable` path, `logLevel` settings, and `onBrowserDownload` function to manage download specifics and progression.
 * @returns {Promise<void>} A promise that resolves when the browser is prepared with no explicit return value.
 */
export declare const ensureBrowser: (options?: EnsureBrowserOptions) => Promise<BrowserStatus>;
export {};
